{"version":3,"sources":["store/ActionTypes.ts","api/Users.ts","store/selectors.ts","components/PotstList/PostsList.tsx","store/actions.ts","components/AlbumsList/AlbumsList.tsx","api/Albums.ts","api/Posts.ts","components/User/User.tsx","components/UserList/UserList.tsx","App.tsx","store/index.ts","index.tsx"],"names":["ActionTypes","getUsers","a","fetch","users","json","getUsersFromServer","initialState","usersFromServer","getUserAlboums","userAlboums","getActiveModal","activeModal","getPostsFromServer","postsFromServer","getLoader","loader","PostList","posts","useSelector","to","className","width","src","alt","map","post","id","title","body","setUsersFromServer","createAction","SET_UsersFromServer","setUserAlbums","SET_UserAlboums","setActiveModal","SET_ActiveModal","setPostsFromServer","SET_PostsFromServer","setLoader","SET_loader","AlbumsList","albums","dispatch","useDispatch","isActive","classNames","find","album","userId","type","onClick","getAlbums","getPosts","User","user","getUserAlbums","albumsFromServer","getUserPosts","username","name","company","href","email","rel","phone","website","target","UserList","App","useState","setUsers","getDataUsers","useEffect","path","element","reducer","createReducer","builder","addCase","state","action","payload","store","configureStore","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.89602ef1.chunk.js","sourcesContent":["/* eslint-disable no-shadow */\nexport enum ActionTypes {\n  SET_UsersFromServer = 'SET_UsersFromServer',\n  SET_UserAlboums = 'SET_UserAlboums',\n  SET_ActiveModal = 'SET_ActiveModal',\n  SET_PostsFromServer = 'SET_PostsFromServer',\n  SET_loader = 'SET_loader',\n}\n","// eslint-disable-next-line import/extensions, import/no-unresolved\nimport { UserType } from '../react-app-env';\n\nconst BASE_URL = 'https://jsonplaceholder.typicode.com/users';\n\nconst getUsers = async (): Promise<UserType[]> => {\n  const users = await fetch(BASE_URL);\n\n  return users.json();\n};\n\nexport default getUsers;\n","/* eslint-disable import/extensions */\n/* eslint-disable import/no-unresolved */\nimport { State } from '../react-app-env';\n\nexport const getUsersFromServer = (initialState: State) => initialState.usersFromServer;\nexport const getUserAlboums = (initialState: State) => initialState.userAlboums;\nexport const getActiveModal = (initialState: State) => initialState.activeModal;\nexport const getPostsFromServer = (initialState: State) => initialState.postsFromServer;\nexport const getLoader = (initialState: State) => initialState.loader;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport './PostsList.scss';\nimport { Link } from 'react-router-dom';\n// eslint-disable-next-line import/extensions, import/no-unresolved\nimport { PostType } from '../../react-app-env';\nimport { getLoader, getPostsFromServer } from '../../store/selectors';\n\nconst PostList: React.FC = () => {\n  const posts = useSelector(getPostsFromServer);\n  const loader = useSelector(getLoader);\n\n  return (\n    <>\n      {loader === false ? (\n        <ul>\n          <Link to=\"/\" className=\"button is-danger m-3\">\n            <img\n              width={50}\n              src=\"https://thypix.com/wp-content/uploads/2020/04/white-arrow-21-700x368.png\"\n              alt=\"arrow\"\n            />\n            Back to Users\n          </Link>\n          {posts.map((post: PostType) => (\n            <li key={post.id} className=\"m-3\">\n              <div>\n                <h3 className=\"title is-4 m-1\">{`Post â„–${post.id}: ${post.title}`}</h3>\n                <p className=\"m-0\">{post.body}</p>\n              </div>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <div className=\"button is-white is-loading loader\">Loading...</div>\n      )}\n    </>\n  );\n};\n\nexport default PostList;\n","import { createAction } from '@reduxjs/toolkit';\nimport { ActionTypes } from './ActionTypes';\n// eslint-disable-next-line import/extensions, import/no-unresolved\nimport { AlboumType, PostType, UserType } from '../react-app-env';\n\nexport const setUsersFromServer = createAction<UserType[]>(\n  ActionTypes.SET_UsersFromServer,\n);\nexport const setUserAlbums = createAction<AlboumType[]>(\n  ActionTypes.SET_UserAlboums,\n);\nexport const setActiveModal = createAction<boolean>(\n  ActionTypes.SET_ActiveModal,\n);\n\nexport const setPostsFromServer = createAction<PostType[]>(\n  ActionTypes.SET_PostsFromServer,\n);\n\nexport const setLoader = createAction<boolean>(ActionTypes.SET_loader);\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport classNames from 'classnames';\n// eslint-disable-next-line import/extensions, import/no-unresolved\nimport { AlboumType } from '../../react-app-env';\nimport './AlbumsList.scss';\n\nimport { getActiveModal, getUserAlboums } from '../../store/selectors';\nimport { setActiveModal } from '../../store/actions';\n\nconst AlbumsList: React.FC = () => {\n  const albums = useSelector(getUserAlboums);\n  const dispatch = useDispatch();\n  const isActive = useSelector(getActiveModal);\n\n  return (\n    <div\n      className={classNames('albums ', {\n        'albums--active': isActive === false,\n      })}\n    >\n      <div className=\"albums__box\">\n        <h2 className=\"title is-3 m-0\">Albums</h2>\n        <b>\n          {`User ID: ${\n            albums.find((album) => album.userId)?.userId\n            || 'Cant find user by ID'\n          }`}\n        </b>\n        <button\n          className=\"button is-small is-danger is-rounded\"\n          type=\"button\"\n          onClick={() => dispatch(setActiveModal(false))}\n        >\n          Close\n        </button>\n      </div>\n      <ul>\n        {albums.map((album: AlboumType) => (\n          <li key={album.id}>\n            <b>{`Album ID ${album.id}: `}</b>\n            {album.title}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default AlbumsList;\n","// eslint-disable-next-line import/extensions, import/no-unresolved\nimport { AlboumType } from '../react-app-env';\n\nconst BASE_URL = 'https://jsonplaceholder.typicode.com/albums?userId=';\n\nconst getAlbums = async (id: number): Promise<AlboumType[]> => {\n  const albums = await fetch(`${BASE_URL}${id}`);\n\n  return albums.json();\n};\n\nexport default getAlbums;\n","// eslint-disable-next-line import/extensions, import/no-unresolved\nimport { PostType } from '../react-app-env';\n\nconst BASE_URL = 'https://jsonplaceholder.typicode.com/posts?userId=';\n\nconst getPosts = async (id: number): Promise<PostType[]> => {\n  const posts = await fetch(`${BASE_URL}${id}`);\n\n  return posts.json();\n};\n\nexport default getPosts;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport getAlbums from '../../api/Albums';\n// eslint-disable-next-line import/extensions, import/no-unresolved\nimport { UserType } from '../../react-app-env';\nimport {\n  setActiveModal,\n  setLoader,\n  setPostsFromServer,\n  setUserAlbums,\n} from '../../store/actions';\nimport getPosts from '../../api/Posts';\n\ninterface Props {\n  user: UserType;\n}\n\nconst User: React.FC<Props> = ({ user }) => {\n  const dispatch = useDispatch();\n\n  const getUserAlbums = async (id: number) => {\n    const albumsFromServer = await getAlbums(id);\n\n    dispatch(setUserAlbums(albumsFromServer));\n  };\n\n  const getUserPosts = async (id: number) => {\n    const postsFromServer = await getPosts(id);\n\n    dispatch(setPostsFromServer(postsFromServer));\n    dispatch(setLoader(false));\n  };\n\n  return (\n    <>\n      <ul>\n        <h2 className=\"title is-4 m-0\">{user.username}</h2>\n        <li>\n          <p>\n            <i className=\"subtitle is-6\">{`Real name: ${user.name}`}</i>\n          </p>\n          <p>\n            <i className=\"is-size-7 m-6\">\n              <b>Company: </b>\n              {`\"${user.company.name}\"`}\n            </i>\n          </p>\n        </li>\n        <li>\n          <b>Email: </b>\n          <a\n            className=\"is-size-7\"\n            href={`mailto:${user.email}`}\n            rel=\"noreferrer\"\n          >\n            {user.email}\n          </a>\n        </li>\n        <li>\n          <b>Phone: </b>\n          <a className=\"is-size-7\" href={`tel:+${user.phone}`} rel=\"noreferrer\">\n            {user.phone}\n          </a>\n        </li>\n        <li>\n          <b>Website: </b>\n          <a\n            className=\"is-size-7\"\n            href={`http://${user.website}`}\n            rel=\"noreferrer\"\n            target=\"_blank\"\n          >\n            {`http://${user.website}`}\n          </a>\n        </li>\n        <li>\n          <Link\n            to={`/posts=${user.id}`}\n            className=\"button is-info is-outlined m-2\"\n            onClick={() => {\n              getUserPosts(user.id);\n              dispatch(setLoader(true));\n            }}\n            type=\"button\"\n          >\n            Show Post\n          </Link>\n          <button\n            className=\"button is-info is-outlined m-2\"\n            type=\"button\"\n            onClick={() => {\n              getUserAlbums(user.id);\n              dispatch(setActiveModal(true));\n            }}\n          >\n            Show Albums\n          </button>\n        </li>\n      </ul>\n    </>\n  );\n};\n\nexport default User;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n// eslint-disable-next-line import/extensions, import/no-unresolved\nimport { UserType } from '../../react-app-env';\nimport './UserList.scss';\nimport { getUsersFromServer } from '../../store/selectors';\nimport Albums from '../AlbumsList/AlbumsList';\nimport User from '../User/User';\n\nconst UserList: React.FC = () => {\n  const users = useSelector(getUsersFromServer);\n\n  return (\n    <>\n      <Albums />\n      <ul className=\"is-flex is-flex-direction-row is-flex-wrap-wrap is-justify-content-center is-align-content-center p-6\">\n        {users.map((user: UserType) => {\n          return (\n            <li key={user.id} className=\"user m-3 p-3\">\n              <User user={user} />\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nexport default UserList;\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Route, Routes } from 'react-router-dom';\nimport getUsers from './api/Users';\nimport PostList from './components/PotstList/PostsList';\nimport UserList from './components/UserList/UserList';\n// eslint-disable-next-line import/extensions, import/no-unresolved\nimport { UserType } from './react-app-env';\nimport { setUsersFromServer } from './store/actions';\n\nexport const App: React.FC = () => {\n  const dispatch = useDispatch();\n  const [users, setUsers] = useState<UserType[]>([]);\n\n  const getDataUsers = async () => {\n    const usersFromServer: UserType[] = await getUsers();\n\n    setUsers(usersFromServer);\n    dispatch(setUsersFromServer(usersFromServer));\n  };\n\n  useEffect(() => {\n    getDataUsers();\n  }, []);\n\n  return (\n    <Routes>\n      <Route path=\"/\" element={<UserList />} />\n      {users.map((user) => (\n        <Route\n          key={user.id}\n          path={`/posts=${user.id}`}\n          element={<PostList />}\n        />\n      ))}\n    </Routes>\n  );\n};\n","/* eslint-disable import/extensions */\nimport { configureStore, createReducer } from '@reduxjs/toolkit';\nimport {\n  setActiveModal,\n  setLoader,\n  setPostsFromServer,\n  setUserAlbums,\n  setUsersFromServer,\n} from './actions';\n// eslint-disable-next-line import/no-unresolved\nimport { State } from '../react-app-env';\n\nconst initialState: State = {\n  usersFromServer: [],\n  userAlboums: [],\n  activeModal: false,\n  postsFromServer: [],\n  loader: true,\n};\n\nconst reducer = createReducer(initialState, (builder) => {\n  builder.addCase(setUsersFromServer, (state, action) => {\n    state.usersFromServer = action.payload;\n  });\n  builder.addCase(setUserAlbums, (state, action) => {\n    state.userAlboums = action.payload;\n  });\n  builder.addCase(setActiveModal, (state, action) => {\n    state.activeModal = action.payload;\n  });\n  builder.addCase(setPostsFromServer, (state, action) => {\n    state.postsFromServer = action.payload;\n  });\n  builder.addCase(setLoader, (state, action) => {\n    state.loader = action.payload;\n  });\n});\n\nexport const store = configureStore({ reducer });\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter } from 'react-router-dom';\nimport { App } from './App';\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </Provider>,\n\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}